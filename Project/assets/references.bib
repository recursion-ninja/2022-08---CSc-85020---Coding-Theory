% Encoding: UTF-8
@inproceedings{lin2007data,
  title={Data persistence in large-scale sensor networks with decentralized fountain codes},
  author={Lin, Yunfeng and Liang, Ben and Li, Baochun},
  booktitle={IEEE INFOCOM 2007-26th IEEE International Conference on Computer Communications},
  pages={1658--1666},
  year={2007},
  organization={IEEE}
}

@inproceedings{luby2002lt,
  title={LT codes},
  author={Luby, Michael},
  booktitle={The 43rd Annual IEEE Symposium on Foundations of Computer Science, 2002. Proceedings.},
  pages={271--271},
  year={2002},
  organization={IEEE Computer Society}
}

@article{upfal2005probability,
  title={Probability and Computing: Randomized Algorithms and},
  author={Upfal, Michael Mitzenmacher Eli},
  year={2005}
}


@inproceedings{shojania2009nuclei,
  title={Nuclei: GPU-accelerated many-core network coding},
  author={Shojania, Hassan and Li, Baochun and Wang, Xin},
  booktitle={IEEE INFOCOM 2009},
  pages={459--467},
  year={2009},
  organization={IEEE}
}

@online{Stanford-Bit-Twiddling-Hacks,
  author = {Sean Eron Anderson},
  title = {Bit Twiddling Hacks},
  year = 2005,
  url = {https://graphics.stanford.edu/~seander/bithacks.html},
  urldate = {2022-10-26}
}

@InProceedings{DecisionBitVectorsFixedSizeTheory,
author="Cyrluk, David
and M{\"o}ller, Oliver
and Rue{\ss}, Harald",
editor="Grumberg, Orna",
title="An efficient decision procedure for the theory of fixed-sized bit-vectors",
booktitle="Computer Aided Verification",
year="1997",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="60--71",
abstract="In this paper we describe a decision procedure for the core theory of fixed-sized bit-vectors with extraction and composition that can readily be integrated into Shostak's procedure for deciding combinations of theories. Inputs to the solver are unquantified bit-vector equations t=u and the algorithm returns true if t=u is valid in the bit-vector theory, false if t=u is unsatisfiable, and a system of solved equations otherwise. The time complexity of the solver is {\$}{\$}{\backslash}mathcal{\{}O{\}}{\backslash}left( {\{}{\backslash}left| t {\backslash}right| {\backslash}cdot log{\{}{\backslash}text{\{} {\}}{\}}n + n^2 {\}} {\backslash}right){\$}{\$}, where t is the length of the bit-vector term t and n denotes the number of bits on either side of the equation. Then, the solver for the core bit-vector theory is extended to handle other bit-vector operations like bitwise logical operations, shifting, and arithmetic interpretations of bit-vectors. We develop a BDD-like data-structure called bit-vector BDDs to represent bit-vectors, various operations on bit-vectors, and a solver on bit-vector BDDs.",
isbn="978-3-540-69195-2"
}


@inproceedings{DecisionBitVectorArithmetic,
author = {Barrett, Clark W. and Dill, David L. and Levitt, Jeremy R.},
title = {A Decision Procedure for Bit-Vector Arithmetic},
year = {1998},
isbn = {0897919645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/277044.277186},
doi = {10.1145/277044.277186},
abstract = {Bit-v ector theories with concatenation and extraction have been shown to be useful and important for hardware verification. We have implemented an extended theory which includes arithmetic. Although deciding equality in suc h a theory is NP-hard, our implementation is efficient for many practical examples. We believ e this to be the first such implementation which is efficient, automatic, and complete.},
booktitle = {Proceedings of the 35th Annual Design Automation Conference},
pages = {522â€“527},
numpages = {6},
keywords = {placement, flip-flops, low power, voltage scaling, design automatian, MPEG4, synthesis, codec, level converters},
location = {San Francisco, California, USA},
series = {DAC '98}
}

@INPROCEEDINGS{EquivalenceBitVectorsAlgebra,
  author={Shekhar, N. and Kalla, P. and Enescu, F. and Gopalakrishnan, S.},
  booktitle={ICCAD-2005. IEEE/ACM International Conference on Computer-Aided Design, 2005.},   title={Equivalence verification of polynomial datapaths with fixed-size bit-vectors using finite ring algebra},
  year={2005},
  volume={},
  number={},
  pages={291-296},
  doi={10.1109/ICCAD.2005.1560081}
}


@article{TheoremOfLagrange,
author = {Richard L. Roth},
title = {A History of Lagrange's Theorem on Groups},
journal = {Mathematics Magazine},
volume = {74},
number = {2},
pages = {99-108},
year  = {2001},
publisher = {Taylor & Francis},
doi = {10.1080/0025570X.2001.11953045},
URL = {https://doi.org/10.1080/0025570X.2001.11953045},
eprint = {https://doi.org/10.1080/0025570X.2001.11953045}
}

@InProceedings{AutomaticAbstractionForCongruences,
author="King, Andy
and S{\o}ndergaard, Harald",
editor="Barthe, Gilles
and Hermenegildo, Manuel",
title="Automatic Abstraction for Congruences",
booktitle="Verification, Model Checking, and Abstract Interpretation",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="197--213",
abstract="One approach to verifying bit-twiddling algorithms is to derive invariants between the bits that constitute the variables of a program. Such invariants can often be described with systems of congruences where in each equation {\$}{\{}c{\}} {\backslash}cdot {\{}x{\}} = d {\backslash}mod m{\$}, m is a power of two, c is a vector of integer coefficients, and x is a vector of propositional variables (bits). Because of the low-level nature of these invariants and the large number of bits that are involved, it is important that the transfer functions can be derived automatically. We address this problem, showing how an analysis for bit-level congruence relationships can be decoupled into two parts: (1) a SAT-based abstraction (compilation) step which can be automated, and (2) an interpretation step that requires no SAT-solving. We exploit triangular matrix forms to derive transfer functions efficiently, even in the presence of large numbers of bits. Finally we propose program transformations that improve the analysis results.",
isbn="978-3-642-11319-2"
}

